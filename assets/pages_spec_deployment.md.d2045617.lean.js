import{_ as s,o as a,c as n,S as l}from"./chunks/framework.accd7f10.js";const h=JSON.parse('{"title":"常见使用场景","description":"","frontmatter":{},"headers":[],"relativePath":"pages/spec/deployment.md","filePath":"pages/spec/deployment.md","lastUpdated":1736589599000}'),e={name:"pages/spec/deployment.md"};function o(p,t,r,d,c,i){return a(),n("div",null,t[0]||(t[0]=[l(`<h1 id="常见使用场景" tabindex="-1">常见使用场景 <a class="header-anchor" href="#常见使用场景" aria-label="Permalink to &quot;常见使用场景&quot;">​</a></h1><table><thead><tr><th>场景</th><th>应用场景</th><th>应用场景</th></tr></thead><tbody><tr><td>try_files</td><td></td><td>应用场景</td></tr><tr><td>生产环境</td><td>用于实际用户访问的环境</td><td>应用场景</td></tr><tr><td>测试环境</td><td>用于质量保证和测试的环境</td><td>应用场景</td></tr><tr><td>灾备环境</td><td>用于灾难恢复和备份的环境</td><td></td></tr><tr><td>生产环境</td><td>用于实际用户访问的环境</td><td>应用场景</td></tr><tr><td>测试环境</td><td>用于质量保证和测试的环境</td><td>应用场景</td></tr><tr><td>灾备环境</td><td>用于灾难恢复和备份的环境</td><td>应用场景</td></tr></tbody></table><h3 id="try-files" tabindex="-1">try_files <a class="header-anchor" href="#try-files" aria-label="Permalink to &quot;try_files&quot;">​</a></h3><div class="language-nginx"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">server</span><span style="color:#BABED8;"> {</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;"> listen </span><span style="color:#BABED8;">      </span><span style="color:#F78C6C;">9999</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;"> server_name </span><span style="color:#BABED8;"> localhost</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#C792EA;">location</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">/ </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># root   html;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> root </span><span style="color:#BABED8;">/static/projects/test_try_files/dist</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#676E95;font-style:italic;"># index index.html;</span></span>
<span class="line"><span style="color:#BABED8;">       </span><span style="color:#89DDFF;"> try_files $</span><span style="color:#BABED8;">uri </span><span style="color:#89DDFF;">$</span><span style="color:#BABED8;">uri/ /index.html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span></code></pre></div><table><thead><tr><th>应用场景</th><th>描述</th></tr></thead><tbody><tr><td>单页面应用 history模式降级</td><td>当文件不存在时返回自定义404页面（这个404返回应用的首页html即可），这样即可实现刷新之后，不会404，同时保留在当前路由</td></tr><tr><td>移动端选择hash模式还是history模式比较合适？</td><td></td></tr><tr><td>history 模式如果不配置try_files 是否有风险？</td><td></td></tr></tbody></table>`,5)]))}const B=s(e,[["render",o]]);export{h as __pageData,B as default};
